import requests
import json
import nltk
nltk.download('punkt')
def fetch_user_repositories(github_url):
    print("in fetch user")
    username = extract_username_from_url(github_url)
    print("username ",username)
    response = requests.get(f"https://api.github.com/users/{username}/repos")
    repositories = response.json()
    print("repositories",repositories)
    return repositories

def extract_username_from_url(url):
    # Extract the username from the GitHub URL using regex or string manipulation
    # Example implementation:
    parts = url.split("/")
    print("parts---",parts)
    username = parts[-1] if parts[-1] else parts[-2]
    print("username---",username)
    return username


def identify_most_complex_repository(repositories):
    most_complex_repo = None
    highest_complexity_score = float('-inf')
    
    for repo in repositories:
        code = fetch_repository_code(repo)
        preprocessed_code = preprocess_code(code)
        evaluation = generate_evaluation(preprocessed_code)
        complexity_score = calculate_complexity_score(evaluation)
        
        if complexity_score > highest_complexity_score:
            highest_complexity_score = complexity_score
            most_complex_repo = repo
    
    return most_complex_repo

def fetch_repository_code(repo):
    response = requests.get(f"https://api.github.com/repos/{repo['full_name']}/contents")
    files = json.loads(response.text)
    
    code = ""
    for file in files:
        if hasattr(file, 'get'):
            if file.get('type') == "file" and file.get('name', '').endswith(".py"):
                file_response = requests.get(file['download_url'])
                code += file_response.text
        else:
            print('Value is not a dict')
        
    return code


def preprocess_code(code):
    # Tokenization example using nltk
    tokens = nltk.word_tokenize(code)
    preprocessed_code = " ".join(tokens)
    return preprocessed_code

def generate_evaluation(code):
    prompt = generate_prompt(code)
    evaluation = run_gpt_model(prompt)
    return evaluation

# Placeholder functions, replace with actual implementations
def generate_prompt(code):
    return f"Analyze the technical complexity of the code:\n\n{code}"

def run_gpt_model(prompt):
    return "Evaluation generated by GPT"

def calculate_complexity_score(evaluation):
    # Split the evaluation into lines
    lines = evaluation.split('\n')
    
    # Calculate the number of lines of code
    num_lines_of_code = sum(1 for line in lines if line.strip() != '')
    print("num_lines_of_code-",num_lines_of_code)
    # Calculate the complexity score
    complexity_score = num_lines_of_code
    
    return complexity_score

import requests

def fetch_repository_code(repository):
    response = requests.get(repository['url'])
    if response.status_code == 200:
        content = response.json()
        if 'content' in content:
            code = base64.b64decode(content['content']).decode('utf-8')
            return code
    return ""
